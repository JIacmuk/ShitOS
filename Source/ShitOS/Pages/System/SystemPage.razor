@using global::System.Diagnostics
@using ShitOS.Core.Command
@using ShitOS.Core.LoadBalancer
@using ShitOS.Core.Pocessor
@using ShitOS.Core.Task
@using ShitOS.Core.TaskManager
@using ShitOS.Shared.Ui
@using ShitOS.Features.TasksTable
@using ShitOS.Features.SystemOptions
@using ShitOS.Features.TaskOptions
@using ShitOS.Features.CommandOptions
@using ShitOS.Features.TaskManagerOptions
@using ShitOS.Features.SystemState

@page "/"

<WidthWrapper>
    <div class="row">
        <div class="options">
            <SystemStateView
                State="TaskManager.SystemState"/>
            <button class="rounded_button" @onclick="Run">Запустить</button>
            <TaskOptionsController
                TaskFactory="TaskFactory"
                OnAddTask="AddTask"/>

            <AccumulatorOptionsView
                Options="TimerOptions"/>

            <TaskManagerOptionsView
                CpuCount="TaskManager.Options.CpuCount"
                Memory="TaskManager.Options.MemorySize"/>

            <CommandOptionsController
                Memory="CommandsFactory.IOOptions.RequiredMemory"
                Tics="CommandsFactory.IOOptions.RequiredTics"
                CommandType="OsCommandType.IO"
                OnOptionsChanged="(options) => CommandsFactory.IOOptions = options"/>

            <CommandOptionsController
                Memory="CommandsFactory.ExceutableOptions.RequiredMemory"
                Tics="CommandsFactory.ExceutableOptions.RequiredTics"
                CommandType="OsCommandType.Executable"
                OnOptionsChanged="(options) => CommandsFactory.ExceutableOptions = options"/>
        </div>
        <TasksTableView TaskManager="TaskManager"/>
    </div>
</WidthWrapper>

@code
{
    private PeriodicTimer _timer = new(TimeSpan.FromMilliseconds(100));

    [Inject]
    public required OsAccumulator Accumulator { get; set; }
    [Inject] 
    public required OsTaskFactory TaskFactory { get; set; }
    [Inject] 
    public required IOsTaskManager TaskManager { get; set; }
    [Inject] 
    public required TimerOptions TimerOptions { get; set; }
    [Inject] 
    public required OsCommandsFactory CommandsFactory { get; set; }

    void AddTask(OsTask task)
    {
        Accumulator.TaskManager.AddTask(task);
        StateHasChanged();
    }

    async Task Run()
    {
        while (true)
        {
            Accumulator.Process();
            StateHasChanged();
            _timer.Period = TimeSpan.FromSeconds(1.0d / TimerOptions.Fps);
            Accumulator.Options.TicsPerSecond = TimerOptions.TicsPerSecond;
            await _timer.WaitForNextTickAsync();
        }
    }
}